x-server-base: &server_base
    build:
      context: ./server
    image: server
    expose:
      - "${SERVER_PORT}"
    environment:
      - NODE_ENV=development
      - PORT=${SERVER_PORT}
    volumes:
      - ./server:/app
    depends_on:
      - user-service
      - cart-service
      - product-service
      - favorite-service
      - order-service
      - checkout-service
      - payment-service
    networks:
      - backend

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - server-1
      - server-2
      - server-3
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis-service
    expose:
      - "${REDIS_PORT}"
    networks:
      - backend

  server-1:
    <<: *server_base
    container_name: server-1

  server-2:
    <<: *server_base
    container_name: server-2

  server-3:
    <<: *server_base
    container_name: server-3

  user-service:
    build:
      context: ./user
    image: user-service
    container_name: user-service
    expose:
      - "${USER_SERVICE_PORT}"
    environment:
      - NODE_ENV=development
      - DB_URL=${USER_SERVICE_DB}
      - SESSION_SECRET=${SESSION_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PORT=${USER_SERVICE_PORT}
    depends_on:
      - userDb
    volumes:
      - ./user:/app
    networks:
      - backend

  userDb:
    image: postgres
    container_name: userDb
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - user_service:/var/lib/postgresql/data
      - ./user/db.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - postgres
      - -c
      - password_encryption=md5
      - -c
      - listen_addresses=*
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  pgbouncer-user:
    image: edoburu/pgbouncer
    container_name: pgbouncer-user
    expose:
      - "${PG_BOUNCER_PORT}"
    environment:
      DATABASE_URL: ${USER_SERVICE_DB_INTERNAL}
      POOL_MODE: session
      AUTH_TYPE: md5
    depends_on:
      - userDb
    networks:
      - backend

  cart-service:
    build:
      context: ./cart
    image: cart-service
    container_name: cart-service
    expose:
      - "${CART_SERVICE_PORT}"
    environment:
      - NODE_ENV=development
      - DB_URL=${CART_SERVICE_DB}
      - PORT=${CART_SERVICE_PORT}
    depends_on:
      - cartDb
    volumes:
      - ./cart:/app
    networks:
      - backend

  cartDb:
    image: postgres
    container_name: cartDb
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${CART_DB_USER}
      - POSTGRES_PASSWORD=${CART_DB_PASSWORD}
      - POSTGRES_DB=${CART_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - cart_service:/var/lib/postgresql/data
      - ./cart/db.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - postgres
      - -c
      - password_encryption=md5
      - -c
      - listen_addresses=*
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CART_DB_USER} -d ${CART_DB_NAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    
  pgbouncer-cart:
    image: edoburu/pgbouncer
    container_name: pgbouncer-cart
    expose:
      - "${PG_BOUNCER_PORT}"
    environment:
      DATABASE_URL: ${CART_SERVICE_DB_INTERNAL}
      POOL_MODE: session
      AUTH_TYPE: md5
    depends_on:
      - cartDb
    networks:
      - backend

  product-service:
    build:
      context: ./product
    image: product-service
    container_name: product-service
    expose:
      - "${PRODUCT_SERVICE_PORT}"
    environment:
      - NODE_ENV=development
      - DB_URL=${PRODUCT_SERVICE_DB}
      - PORT=${PRODUCT_SERVICE_PORT}
    depends_on:
      - productDb
    volumes:
      - ./product:/app
    networks:
      - backend

  productDb:
    image: postgres
    container_name: productDb
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${PRODUCT_DB_USER}
      - POSTGRES_PASSWORD=${PRODUCT_DB_PASSWORD}
      - POSTGRES_DB=${PRODUCT_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - product_service:/var/lib/postgresql/data
      - ./product/db.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - postgres
      - -c
      - password_encryption=md5
      - -c
      - listen_addresses=*
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PRODUCT_DB_USER} -d ${PRODUCT_DB_NAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  pgbouncer-product:
    image: edoburu/pgbouncer
    container_name: pgbouncer-product
    expose:
      - "${PG_BOUNCER_PORT}"
    environment:
      DATABASE_URL: ${PRODUCT_SERVICE_DB_INTERNAL}
      POOL_MODE: session
      AUTH_TYPE: md5
    depends_on:
      - productDb
    networks:
      - backend

  favorite-service:
    build:
      context: ./favorite
    image: favorite-service
    container_name: favorite-service
    expose:
      - "${FAVORITE_SERVICE_PORT}"
    environment:
      - NODE_ENV=development
      - DB_URL=${FAVORITE_SERVICE_DB}
      - PORT=${FAVORITE_SERVICE_PORT}
    depends_on:
      - favoriteDb
    volumes:
      - ./favorite:/app
    networks:
      - backend

  favoriteDb:
    image: postgres
    container_name: favoriteDb
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${FAVORITE_DB_USER}
      - POSTGRES_PASSWORD=${FAVORITE_DB_PASSWORD}
      - POSTGRES_DB=${FAVORITE_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - favorite_service:/var/lib/postgresql/data
      - ./favorite/db.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - postgres
      - -c
      - password_encryption=md5
      - -c
      - listen_addresses=*
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${FAVORITE_DB_USER} -d ${FAVORITE_DB_NAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  pgbouncer-favorite:
    image: edoburu/pgbouncer
    container_name: pgbouncer-favorite
    expose:
      - "${PG_BOUNCER_PORT}"
    environment:
      DATABASE_URL: ${FAVORITE_SERVICE_DB_INTERNAL}
      POOL_MODE: session
      AUTH_TYPE: md5
    depends_on:
      - favoriteDb
    networks:
      - backend

  order-service:
    build:
      context: ./order
    image: order-service
    container_name: order-service
    expose:
      - "${ORDER_SERVICE_PORT}"
    environment:
      - NODE_ENV=development
      - DB_URL=${ORDER_SERVICE_DB}
      - PORT=${ORDER_SERVICE_PORT}
    depends_on:
      - orderDb
    volumes:
      - ./order:/app
    networks:
      - backend

  orderDb:
    image: postgres
    container_name: orderDb
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${ORDER_DB_USER}
      - POSTGRES_PASSWORD=${ORDER_DB_PASSWORD}
      - POSTGRES_DB=${ORDER_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - order_service:/var/lib/postgresql/data
      - ./order/db.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - postgres
      - -c
      - password_encryption=md5
      - -c
      - listen_addresses=*
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ORDER_DB_USER} -d ${ORDER_DB_NAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  pgbouncer-order:
    image: edoburu/pgbouncer
    container_name: pgbouncer-order
    expose:
      - "${PG_BOUNCER_PORT}"
    environment:
      DATABASE_URL: ${ORDER_SERVICE_DB_INTERNAL}
      POOL_MODE: session
      AUTH_TYPE: md5
    depends_on:
      - orderDb
    networks:
      - backend

  checkout-service:
    build:
      context: ./checkout
    image: checkout-service
    container_name: checkout-service
    expose:
      - "${CHECKOUT_SERVICE_PORT}"
    environment:
      - NODE_ENV=development
      - PORT=${CHECKOUT_SERVICE_PORT}
    volumes:
      - ./checkout:/app
    networks:
      - backend

  payment-service:
    build:
      context: ./payment
    image: payment-service
    container_name: payment-service
    expose:
      - "${PAYMENT_SERVICE_PORT}"
    environment:
      - NODE_ENV=development
      - PORT=${PAYMENT_SERVICE_PORT}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    volumes:
      - ./payment:/app
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  user_service:
    driver: local
  cart_service:
    driver: local
  product_service:
    driver: local
  favorite_service:
    driver: local
  order_service:
    driver: local
