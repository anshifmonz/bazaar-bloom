x-server-base: &server_base
    build:
      context: ./server
    image: server
    expose:
      - "${SERVER_PORT}"
    environment:
      - NODE_ENV=production
      - PORT=${SERVER_PORT}
    depends_on:
      - user-service
      - cart-service
      - product-service
      - favorite-service
      - order-service
      - checkout-service
      - payment-service
    networks:
      - backend

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - server-1
      - server-2
      - server-3
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis-service
    expose:
      - "${REDIS_PORT}"
    networks:
      - backend

  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  server-1:
    <<: *server_base
    container_name: server-1

  server-2:
    <<: *server_base
    container_name: server-2

  server-3:
    <<: *server_base
    container_name: server-3

  user-service:
    build:
      context: ./user
    image: user-service
    container_name: user-service
    expose:
      - "${USER_SERVICE_PORT}"
    environment:
      - NODE_ENV=production
      - DB_URL=${USER_SERVICE_DB}
      - SESSION_SECRET=${SESSION_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PORT=${USER_SERVICE_PORT}
    depends_on:
      - userDb
    networks:
      - backend

  userDb:
    image: postgres
    container_name: userDb
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - user_service:/var/lib/postgresql/data
      - ./user/db.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - postgres
      - -c
      - password_encryption=md5
      - -c
      - listen_addresses=*
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  pgbouncer-user:
    image: edoburu/pgbouncer
    build:
      context: ./pgbouncer-config/user
    container_name: pgbouncer-user
    expose:
      - "${PG_BOUNCER_PORT}"
    environment:
      DB_HOST: userDb
      DB_NAME: ${USER_DB_NAME}
      DB_USER: ${USER_DB_USER}
      DB_PASSWORD: ${USER_DB_PASSWORD}
      PGBOUNCER_STATS_USER: ${PGBOUNCER_STATS_USER}
      PGBOUNCER_STATS_PASSWORD: ${PGBOUNCER_STATS_PASSWORD}
    volumes:
      - ./pgbouncer-config/user/pgbouncer.template.ini:/etc/pgbouncer/pgbouncer.template.ini
      - ./pgbouncer-config/user/entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
      - ./pgbouncer-config/user/users.txt:/etc/pgbouncer/users.txt
    entrypoint: ["/docker-entrypoint-initdb.d/entrypoint.sh"]
    depends_on:
      - userDb
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "${PG_BOUNCER_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5

  cart-service:
    build:
      context: ./cart
    image: cart-service
    container_name: cart-service
    expose:
      - "${CART_SERVICE_PORT}"
    environment:
      - NODE_ENV=production
      - DB_URL=${CART_SERVICE_DB}
      - PORT=${CART_SERVICE_PORT}
    depends_on:
      - cartDb
    networks:
      - backend

  cartDb:
    image: postgres
    container_name: cartDb
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${CART_DB_USER}
      - POSTGRES_PASSWORD=${CART_DB_PASSWORD}
      - POSTGRES_DB=${CART_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - cart_service:/var/lib/postgresql/data
      - ./cart/db.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - postgres
      - -c
      - password_encryption=md5
      - -c
      - listen_addresses=*
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CART_DB_USER} -d ${CART_DB_NAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    
  pgbouncer-cart:
    image: edoburu/pgbouncer
    container_name: pgbouncer-cart
    build:
      context: ./pgbouncer-config/cart
    expose:
      - "${PG_BOUNCER_PORT}"
    environment:
      DB_HOST: cartDb
      DB_NAME: ${CART_DB_NAME}
      DB_USER: ${CART_DB_USER}
      DB_PASSWORD: ${CART_DB_PASSWORD}
      PGBOUNCER_STATS_USER: ${PGBOUNCER_STATS_USER}
      PGBOUNCER_STATS_PASSWORD: ${PGBOUNCER_STATS_PASSWORD}
    volumes:
      - ./pgbouncer-config/cart/pgbouncer.template.ini:/etc/pgbouncer/pgbouncer.template.ini
      - ./pgbouncer-config/cart/entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
      - ./pgbouncer-config/cart/users.txt:/etc/pgbouncer/users.txt
    entrypoint: ["/docker-entrypoint-initdb.d/entrypoint.sh"]
    depends_on:
      - cartDb
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "${PG_BOUNCER_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5

  product-service:
    build:
      context: ./product
    image: product-service
    container_name: product-service
    expose:
      - "${PRODUCT_SERVICE_PORT}"
    environment:
      - NODE_ENV=production
      - DB_URL=${PRODUCT_SERVICE_DB}
      - PORT=${PRODUCT_SERVICE_PORT}
    depends_on:
      - productDb
    networks:
      - backend

  productDb:
    image: postgres
    container_name: productDb
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${PRODUCT_DB_USER}
      - POSTGRES_PASSWORD=${PRODUCT_DB_PASSWORD}
      - POSTGRES_DB=${PRODUCT_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - product_service:/var/lib/postgresql/data
      - ./product/db.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - postgres
      - -c
      - password_encryption=md5
      - -c
      - listen_addresses=*
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PRODUCT_DB_USER} -d ${PRODUCT_DB_NAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  pgbouncer-product:
    image: edoburu/pgbouncer
    container_name: pgbouncer-product
    build:
      context: ./pgbouncer-config/product
    expose:
      - "${PG_BOUNCER_PORT}"
    environment:
      DB_HOST: productDb
      DB_NAME: ${PRODUCT_DB_NAME}
      DB_USER: ${PRODUCT_DB_USER}
      DB_PASSWORD: ${PRODUCT_DB_PASSWORD}
      PGBOUNCER_STATS_USER: ${PGBOUNCER_STATS_USER}
      PGBOUNCER_STATS_PASSWORD: ${PGBOUNCER_STATS_PASSWORD}
    volumes:
      - ./pgbouncer-config/product/pgbouncer.template.ini:/etc/pgbouncer/pgbouncer.template.ini
      - ./pgbouncer-config/product/entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
      - ./pgbouncer-config/product/users.txt:/etc/pgbouncer/users.txt
    entrypoint: ["/docker-entrypoint-initdb.d/entrypoint.sh"]
    depends_on:
      - productDb
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "${PG_BOUNCER_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5

  favorite-service:
    build:
      context: ./favorite
    image: favorite-service
    container_name: favorite-service
    expose:
      - "${FAVORITE_SERVICE_PORT}"
    environment:
      - NODE_ENV=production
      - DB_URL=${FAVORITE_SERVICE_DB}
      - PORT=${FAVORITE_SERVICE_PORT}
    depends_on:
      - favoriteDb
    networks:
      - backend

  favoriteDb:
    image: postgres
    container_name: favoriteDb
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${FAVORITE_DB_USER}
      - POSTGRES_PASSWORD=${FAVORITE_DB_PASSWORD}
      - POSTGRES_DB=${FAVORITE_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - favorite_service:/var/lib/postgresql/data
      - ./favorite/db.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - postgres
      - -c
      - password_encryption=md5
      - -c
      - listen_addresses=*
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${FAVORITE_DB_USER} -d ${FAVORITE_DB_NAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  pgbouncer-favorite:
    image: edoburu/pgbouncer
    container_name: pgbouncer-favorite
    build:
      context: ./pgbouncer-config/favorite
    expose:
      - "${PG_BOUNCER_PORT}"
    environment:
      DB_HOST: favoriteDb
      DB_NAME: ${FAVORITE_DB_NAME}
      DB_USER: ${FAVORITE_DB_USER}
      DB_PASSWORD: ${FAVORITE_DB_PASSWORD}
      PGBOUNCER_STATS_USER: ${PGBOUNCER_STATS_USER}
      PGBOUNCER_STATS_PASSWORD: ${PGBOUNCER_STATS_PASSWORD}
    volumes:
      - ./pgbouncer-config/favorite/pgbouncer.template.ini:/etc/pgbouncer/pgbouncer.template.ini
      - ./pgbouncer-config/favorite/entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
      - ./pgbouncer-config/favorite/users.txt:/etc/pgbouncer/users.txt
    entrypoint: ["/docker-entrypoint-initdb.d/entrypoint.sh"]
    depends_on:
      - favoriteDb
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "${PG_BOUNCER_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5

  order-service:
    build:
      context: ./order
    image: order-service
    container_name: order-service
    expose:
      - "${ORDER_SERVICE_PORT}"
    environment:
      - NODE_ENV=production
      - DB_URL=${ORDER_SERVICE_DB}
      - PORT=${ORDER_SERVICE_PORT}
    depends_on:
      - orderDb
    networks:
      - backend

  orderDb:
    image: postgres
    container_name: orderDb
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${ORDER_DB_USER}
      - POSTGRES_PASSWORD=${ORDER_DB_PASSWORD}
      - POSTGRES_DB=${ORDER_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - order_service:/var/lib/postgresql/data
      - ./order/db.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - postgres
      - -c
      - password_encryption=md5
      - -c
      - listen_addresses=*
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ORDER_DB_USER} -d ${ORDER_DB_NAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  pgbouncer-order:
    image: edoburu/pgbouncer
    container_name: pgbouncer-order
    build:
      context: ./pgbouncer-config/order
    expose:
      - "${PG_BOUNCER_PORT}"
    environment:
      DB_HOST: orderDb
      DB_NAME: ${ORDER_DB_NAME}
      DB_USER: ${ORDER_DB_USER}
      DB_PASSWORD: ${ORDER_DB_PASSWORD}
      PGBOUNCER_STATS_USER: ${PGBOUNCER_STATS_USER}
      PGBOUNCER_STATS_PASSWORD: ${PGBOUNCER_STATS_PASSWORD}
    volumes:
      - ./pgbouncer-config/order/pgbouncer.template.ini:/etc/pgbouncer/pgbouncer.template.ini
      - ./pgbouncer-config/order/entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
      - ./pgbouncer-config/order/users.txt:/etc/pgbouncer/users.txt
    entrypoint: ["/docker-entrypoint-initdb.d/entrypoint.sh"]
    depends_on:
      - orderDb
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "${PG_BOUNCER_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5

  checkout-service:
    build:
      context: ./checkout
    image: checkout-service
    container_name: checkout-service
    expose:
      - "${CHECKOUT_SERVICE_PORT}"
    environment:
      - NODE_ENV=production
      - PORT=${CHECKOUT_SERVICE_PORT}
    networks:
      - backend

  payment-service:
    build:
      context: ./payment
    image: payment-service
    container_name: payment-service
    expose:
      - "${PAYMENT_SERVICE_PORT}"
    environment:
      - NODE_ENV=production
      - PORT=${PAYMENT_SERVICE_PORT}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    networks:
      - backend

  # ─────────────────────────────────────────────────────────────────────────────
  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    expose:
      - 9121
    command:
      - '--redis.addr=redis:${REDIS_PORT}'
    depends_on:
      - redis
    networks:
      - backend

  # ─────────────────────────────────────────────────────────────────────────────
  # Postgres Exporters (one per DB)
  postgres-exporter-user:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-user
    expose:
      - 9187
    environment:
      DATA_SOURCE_NAME: "postgresql://${USER_DB_USER}:${USER_DB_PASSWORD}@userDb:5432/${USER_DB_NAME}?sslmode=disable"
    depends_on:
      - userDb
    networks:
      - backend

  postgres-exporter-cart:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-cart
    expose:
      - 9187
    environment:
      DATA_SOURCE_NAME: "postgresql://${CART_DB_USER}:${CART_DB_PASSWORD}@cartDb:5432/${CART_DB_NAME}?sslmode=disable"
    depends_on:
      - cartDb
    networks:
      - backend

  postgres-exporter-product:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-product
    expose:
      - 9187
    environment:
      DATA_SOURCE_NAME: "postgresql://${PRODUCT_DB_USER}:${PRODUCT_DB_PASSWORD}@productDb:5432/${PRODUCT_DB_NAME}?sslmode=disable"
    depends_on:
      - productDb
    networks:
      - backend

  postgres-exporter-favorite:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-favorite
    expose:
      - 9187
    environment:
      DATA_SOURCE_NAME: "postgresql://${FAVORITE_DB_USER}:${FAVORITE_DB_PASSWORD}@favoriteDb:5432/${FAVORITE_DB_NAME}?sslmode=disable"
    depends_on:
      - favoriteDb
    networks:
      - backend

  postgres-exporter-order:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-order
    expose:
      - 9187
    environment:
      DATA_SOURCE_NAME: "postgresql://${ORDER_DB_USER}:${ORDER_DB_PASSWORD}@orderDb:5432/${ORDER_DB_NAME}?sslmode=disable"
    depends_on:
      - orderDb
    networks:
      - backend

  # ─────────────────────────────────────────────────────────────────────────────
  # PgBouncer Exporters
  pgbouncer-exporter-user:
    image: prometheuscommunity/pgbouncer-exporter:latest
    container_name: pgbouncer-exporter-user
    expose:
      - 9127
    command:
    - --pgBouncer.connectionString=postgres://${PGBOUNCER_STATS_USER}:${PGBOUNCER_STATS_PASSWORD}@pgbouncer-user:${PG_BOUNCER_PORT}/pgbouncer?sslmode=disable
    depends_on:
      pgbouncer-user:
        condition: service_healthy
    networks:
      - backend

  pgbouncer-exporter-cart:
    image: prometheuscommunity/pgbouncer-exporter:latest
    container_name: pgbouncer-exporter-cart
    expose:
      - 9127
    command:
    - --pgBouncer.connectionString=postgres://${PGBOUNCER_STATS_USER}:${PGBOUNCER_STATS_PASSWORD}@pgbouncer-cart:${PG_BOUNCER_PORT}/pgbouncer?sslmode=disable
    depends_on:
      pgbouncer-cart:
        condition: service_healthy
    networks:
      - backend

  pgbouncer-exporter-product:
    image: prometheuscommunity/pgbouncer-exporter:latest
    container_name: pgbouncer-exporter-product
    expose:
      - 9127
    command:
    - --pgBouncer.connectionString=postgres://${PGBOUNCER_STATS_USER}:${PGBOUNCER_STATS_PASSWORD}@pgbouncer-product:${PG_BOUNCER_PORT}/pgbouncer?sslmode=disable
    depends_on:
      pgbouncer-product:
        condition: service_healthy
    networks:
      - backend

  pgbouncer-exporter-favorite:
    image: prometheuscommunity/pgbouncer-exporter:latest
    container_name: pgbouncer-exporter-favorite
    expose:
      - 9127
    command:
    - --pgBouncer.connectionString=postgres://${PGBOUNCER_STATS_USER}:${PGBOUNCER_STATS_PASSWORD}@pgbouncer-favorite:${PG_BOUNCER_PORT}/pgbouncer?sslmode=disable
    depends_on:
      pgbouncer-favorite:
        condition: service_healthy
    networks:
      - backend

  pgbouncer-exporter-order:
    image: prometheuscommunity/pgbouncer-exporter:latest
    container_name: pgbouncer-exporter-order
    expose:
      - 9127
    command:
    - --pgBouncer.connectionString=postgres://${PGBOUNCER_STATS_USER}:${PGBOUNCER_STATS_PASSWORD}@pgbouncer-order:${PG_BOUNCER_PORT}/pgbouncer?sslmode=disable
    depends_on:
      pgbouncer-order:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  user_service:
    driver: local
  cart_service:
    driver: local
  product_service:
    driver: local
  favorite_service:
    driver: local
  order_service:
    driver: local
